# SPDX-License-Identifier: GPL-3.0-or-later
import sys
import pandas as pd
from bluerecording.writeH5 import writeH5File
from bluerecording.utils import process_writeH5_inputs

if __name__=='__main__':


    path_to_simconfig = sys.argv[1] # simulation_config.json with one-timestep compartment report
    segment_position_folder = sys.argv[2] # Folder with segment positions; output of getPositions.py
    outputfile = sys.argv[3]
    
    neurons_per_file = int(sys.argv[4])

    numFilesPerFolder = int(sys.argv[5]) # Number of files per subfolder in segment positions folder

    electrode_csv = sys.argv[6] # Data about each electrode in array

    electrode_df = pd.read_csv(electrode_csv,header=0,index_col=0)

    numElectrodes = len(electrode_df.index)

    sigma = 0.277 # Conductance of the brain tissue, in S/m
    path_to_fields = None # H5 file generated by the finite element solver with the potential field resulting from a current between two recording electrodes

    if len(sys.argv)>7: # Specify conductance or a potential field. If both are used, conductance must be first

        try:
            sigma = [float(sys.argv[7])] # If the argument is a number, assume it is a conductance
        except:
            path_to_fields = sys.argv[7]
            
    if len(sys.argv)>8:
        path_to_fields = sys.argv[8]

    if path_to_fields is not None:
        if ' ' in path_to_fields: # If multiple potential field files, splits them into a list
            path_to_fields = path_to_fields.split(' ')
        else:
            path_to_fields = [path_to_fields] # Converts to list so that we can still call path_to_fields[0]

    # Radius is the radius to be used for the objective csd calculation
    sigma, path_to_fields, objectiveCsdIdx = process_writeH5_inputs(sys.argv)
    
    writeH5File(path_to_simconfig,segment_position_folder,outputfile,neurons_per_file,numFilesPerFolder,sigma,path_to_fields,objectiveCsdIdx)
