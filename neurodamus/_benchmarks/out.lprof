Timer unit: 1e-06 s

Total time: 38.2231 s
File: /media/psf/Home/dev/neurodamus/python/neurodamus/cell_distributor.py
Function: __init__ at line 44

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    44                                               def __init__(self, configParser, targetParser, pnm):
    45                                                   """Constructor for CellDistributor object, takes information loaded from start.ncs to know what cells
    46                                                   are available in the circuit and a flag to indicate the state if LoadBalancing.
    47                                           
    48                                                   Params:
    49                                                       configParser: config parser object
    50                                                       targetParser: in case there is a circuit target
    51                                                       pnm:  The parallel node manager (to know rank and nNodes)
    52                                           
    53                                                   Returns: gidvec and metypes
    54                                                   """
    55                                                   # local: isVerbose, timeID_load, timeID_create, libraryCellCount, cellIndex
    56                                                   # localobj: circuitTarget, mePath, templatePath, cxPath, runMode, rngInfo, morphPath, nil, melabel, meInfoItem, parsedRun
    57                                                   global _h
    58         2         20.0     10.0      0.0          _h = Neuron.h
    59         2          8.0      4.0      0.0          self.configParser = configParser
    60         2          2.0      1.0      0.0          self.targetParser = targetParser
    61         2          3.0      1.5      0.0          self.pnm = pnm
    62         2       5898.0   2949.0      0.0          self.nhost = int(self.pnm.nhost)
    63         2         12.0      6.0      0.0          self.rank = int(self.pnm.myid)
    64                                           
    65         2          4.0      2.0      0.0          self._load_balance = None
    66         2          3.0      1.5      0.0          self.lbFlag = False
    67         2          4.0      2.0      0.0          self.gidvec = None
    68         2          3.0      1.5      0.0          self.gid2metype = None
    69         2          3.0      1.5      0.0          self.gid2mefile = None
    70         2          4.0      2.0      0.0          self.meinfo = None
    71         2          4.0      2.0      0.0          self.cellCount = 0
    72         2          2.0      1.0      0.0          self.completeCellCount = -1  # may be filled in by CircuitTarget or cell library file
    73         2          3.0      1.5      0.0          self.useMVD3 = False
    74                                           
    75                                                   # finalize will require a placeholder object for calling connect2target
    76         2        245.0    122.5      0.0          if not hasattr(_h, "nc_"):
    77         1         89.0     89.0      0.0              _h("objref nc_")
    78                                           
    79         2          2.0      1.0      0.0          globalSeed = 0
    80         2          3.0      1.5      0.0          ionchannelSeed = 0
    81         2          2.0      1.0      0.0          msfactor = 0.8
    82         2          6.0      3.0      0.0          parsedRun = configParser.parsedRun
    83         2         39.0     19.5      0.0          morphPath = parsedRun.get("MorphologyPath").s
    84                                           
    85                                                   # for testing if xopen bcast is in use (NEURON 7.3).
    86                                                   # We will be loading different templates on different cpus, so it must be disabled at this point
    87         2         73.0     36.5      0.0          _h("xopen_broadcast_ = 0")
    88                                           
    89                                                   # determine if we should get metype info from start.ncs (current default) or circuit.mvd3 (pending)
    90         2         23.0     11.5      0.0          if parsedRun.exists("CellLibraryFile"):
    91                                                       cellLibFile = parsedRun.get("CellLibraryFile").s
    92                                                       if cellLibFile == "circuit.mvd3":
    93                                                           logging.info("Reading gid:METype info from circuit.mvd3")
    94                                                           self.useMVD3 = True
    95                                                       elif cellLibFile != "start.ncs":
    96                                                           logging.error("Invalid CellLibraryFile %s. Terminating", cellLibFile)
    97                                                           raise ValueError("Invalid CellLibFile {}".format(cellLibFile))
    98                                                   # Default
    99         2          4.0      2.0      0.0          if not self.useMVD3:
   100         2       7966.0   3983.0      0.0              logging.info("Reading gid:METype info from start.ncs")
   101                                           
   102                                                   #  are we using load balancing? If yes, init structs accordingly
   103         2         57.0     28.5      0.0          if parsedRun.exists("RunMode") and parsedRun.get("RunMode").s in ("LoadBalance", "WholeCell"):
   104         1          2.0      2.0      0.0              self.lbFlag = True
   105         2          3.0      1.5      0.0          if self.lbFlag:
   106                                                       # read the cx_* files to build the gidvec
   107         1          8.0      8.0      0.0              cxPath = "cx_%d" % self.nhost
   108         1          9.0      9.0      0.0              if parsedRun.exists("CWD"):  #  TODO: is checking CWD useful?
   109                                                           # Should we allow for another path to facilitate reusing cx* files?
   110                                                           cxPath = path.join(parsedRun.get("CWD").s, cxPath)
   111                                           
   112                                                       # self.binfo reads the files that have the predistributed cells (and pieces)
   113         1       4533.0   4533.0      0.0              self.binfo = _h.BalanceInfo(cxPath, self.rank, self.nhost)
   114                                           
   115                                                       # self.binfo has gidlist, but gids can appear multiple times
   116         1          8.0      8.0      0.0              self.gidvec = ArrayCompat("I")
   117         1          5.0      5.0      0.0              _seen = set()
   118        51         87.0      1.7      0.0              for gid in self.binfo.gids:
   119        50         77.0      1.5      0.0                  gid = int(gid)
   120        50         74.0      1.5      0.0                  if gid not in _seen:
   121        50         85.0      1.7      0.0                      self.gidvec.append(gid)
   122        50        825.0     16.5      0.0                      _seen.add(gid)
   123                                           
   124         1        108.0    108.0      0.0              self.spgidvec = _h.Vector()
   125                                           
   126                                                       # TODO: do we have any way of knowing that a CircuitTarget found definitively matches the cells in the balance files?
   127                                                       #  for now, assume the user is being honest
   128         1         22.0     22.0      0.0              if parsedRun.exists("CircuitTarget"):
   129         1         17.0     17.0      0.0                  circuitTarget = targetParser.getTarget(parsedRun.get("CircuitTarget").s)
   130         1          6.0      6.0      0.0                  self.completeCellCount = int(circuitTarget.completegids().size())
   131                                           
   132         1          7.0      7.0      0.0          elif parsedRun.exists("CircuitTarget"):
   133                                                       # circuit target, so distribute those cells that are members in round-robin style
   134         1         19.0     19.0      0.0              circuitTarget = targetParser.getTarget(parsedRun.get("CircuitTarget").s)
   135         1         15.0     15.0      0.0              self.completeCellCount = circuitTarget.completegids().size()
   136         1          4.0      4.0      0.0              self.gidvec = ArrayCompat("I")
   137                                           
   138         1          3.0      3.0      0.0              c_gids = circuitTarget.completegids()
   139        51         80.0      1.6      0.0              for i, gid in enumerate(c_gids):
   140        50         77.0      1.5      0.0                  gid = int(gid)
   141        50         75.0      1.5      0.0                  if i % self.nhost == self.rank:
   142        50         84.0      1.7      0.0                      self.gidvec.append(gid)
   143                                                   # else:
   144                                                   #   if no circuitTarget, distribute all the cells round robin style; readNCS handles this further down
   145                                           
   146                                                   #  Determine metype; apply round-robin assignment if necessary
   147         2          4.0      2.0      0.0          if self.useMVD3:  # {
   148                                                       self.meinfo = _h.METypeManager()
   149                                                       # loadMVD3 will set completeCellCount if things assigned RR (gidvec not inited)
   150                                                       self.gidvec, self.gid2mefile = self.loadMVD3(configParser, self.gidvec)
   151                                                       logging.info("done loading mvd3 and all mecombo info")
   152                                                   else:
   153         2      20752.0  10376.0      0.1              self.gidvec, self.gid2mefile = self.loadNCS(parsedRun.get("nrnPath").s, self.gidvec)
   154         2         12.0      6.0      0.0              self.gid2metype = {}
   155                                           
   156         2         50.0     25.0      0.0          self.pnm.ncell = self.completeCellCount
   157         2          9.0      4.5      0.0          logging.info("Done gid assignment: %d cells in network, %d cells in rank 0",
   158         2        917.0    458.5      0.0                       self.completeCellCount, len(self.gidvec))
   159                                           
   160         2         10.0      5.0      0.0          self.cellList = []
   161         2          6.0      3.0      0.0          self.gid2meobj = {}
   162                                           
   163         2        102.0     51.0      0.0          mePath = configParser.parsedRun.get("METypePath").s
   164                                           
   165         2        753.0    376.5      0.0          logging.info("Loading cells...")
   166         2         72.0     36.0      0.0          pbar = progressbar.AnimatedProgressBar(end=len(self.gidvec), width=80)
   167                                           
   168       102        319.0      3.1      0.0          for gid in self.gidvec:
   169       100       5929.0     59.3      0.0              pbar.show_progress()
   170       100        187.0      1.9      0.0              if self.useMVD3:
   171                                                           meInfoItem = self.meinfo.retrieveInfo(gid)
   172                                                           tmpCell = METype(gid, mePath, meInfoItem.emodel.s, morphPath, meInfoItem.morph_name.s)
   173                                                           tmpCell.setThreshold(meInfoItem.threshold_current)
   174                                                           tmpCell.setHypAmp(meInfoItem.holding_current)
   175                                                       else:
   176       100     237067.0   2370.7      0.6                  melabel = self.gid2metype[gid] = self.loadTemplate(self.gid2mefile[gid], mePath)
   177       100   37932806.0 379328.1     99.2                  tmpCell = METype(gid, mePath, melabel, morphPath)
   178                                           
   179       100        806.0      8.1      0.0              self.cellList.append(tmpCell)
   180       100        280.0      2.8      0.0              self.gid2meobj[gid] = tmpCell
   181       100       1346.0     13.5      0.0              self.pnm.cells.append(tmpCell.CellRef)
   182       100        884.0      8.8      0.0              pbar + 1
   183         2         57.0     28.5      0.0          print("\r", end=" "*88 + "\r")